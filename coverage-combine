#!/usr/bin/env python

# The MIT License (MIT)
#
# Copyright (c) 2015 Alexander Todorov <atodorov@nospam.otb.bg>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Combine .coverage data files into one.

import sys
import glob
from coverage import coverage
from coverage.version import __version__
from coverage.data import CoverageData
from coverage_tools.utils import *
from optparse import OptionParser

parser = OptionParser(usage="usage: %s [options] <path1> .. <pathN>" % __file__)
parser.add_option("-o", "--output-file", action="store", default=".coverage",
                    help="Name of output file. Default .coverage")

(options, args) = parser.parse_args()

new_args = []
for pattern in args:
    new_args.extend(glob.glob(pattern))

if len(new_args) < 2:
    sys.stderr.write(parser.usage+"\n")
    sys.exit(1)

if compare_versions(__version__, "3.6") >= 0:
    # new versions have better support for combining files
    # see https://bitbucket.org/ned/coveragepy/pull-requests/62
    from coverage.data import CoverageDataFiles

    data = CoverageData()

    dataf = CoverageDataFiles()
    dataf.combine_parallel_data(data, data_paths=new_args)

    data.write_file(options.output_file)
else:
    # use the old API
    data = CoverageData(options.output_file)
    data = coverage36_combine(new_args, data)
    data.write()
